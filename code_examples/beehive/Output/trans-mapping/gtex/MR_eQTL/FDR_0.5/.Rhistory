args[3] = '1'
args[4] = '2.5e8'
args[5] = 'braincortex'
args[6] = '/Users/brian_jo/Desktop/Project/RNAseq_pipeline/Data/Expression/gtex/hg19/GTEx_phs000424_v6p/normalized/covariates/'
args[7] = '/Users/brian_jo/Desktop/Project/RNAseq_pipeline/Output/trans-mapping/gtex/MatrixEQTL/seg_runs/arteryaorta/braincortex_nonverlapping_certain_autosomes_normalized_MatrixEQTL'
input_trans_list_file = args[1]
expression_file_location = args[2]
# changed feature - geno_option is always continuous by default
geno_option = 'continuous'
num_split = as.numeric(args[3])
cis_dist = as.numeric(args[4])
tissue_name = args[5]
cov_dir = args[6]
out_file = args[7]
subj_anno_file = paste0(proj_dir, '/Data/Resources/gtex/covariates/GTEx_Analysis_2015-01-12_Annotations_SubjectPhenotypesDS.txt')
# Import MatrixEQTL
library(MatrixEQTL)
# Simple MatrixEQTL wrapper function
MatrixEQLT_wrapper_function = function(genotype_matrix, expression_matrix, snp_positions_chr, gene_positions) {
cvrt = SlicedData$new()
# cvrt$CreateFromMatrix(as.matrix(covars));
snps = SlicedData$new()
snps$CreateFromMatrix(as.matrix(genotype_matrix));
# Only for all-by-all runs: save the p-values that are over 1e-5, for which there are typically about 1e6 to 1e7 values
pvOutputThreshold = 1
gene = SlicedData$new()
gene$CreateFromMatrix(as.matrix(expression_matrix));
useModel = modelLINEAR;
gene_qnorm = gene$copy();
# Quantile-normalize the expression values - ties broken by averaging
for( sl in 1:length(gene_qnorm) ) {
mat = gene_qnorm[[sl]];
mat = t(apply(mat, 1, rank, ties.method = "average"));
mat = qnorm(mat / (ncol(gene_qnorm)+1));
gene_qnorm[[sl]] = mat;
}
rm(sl, mat);
me = Matrix_eQTL_main(
snps = snps,
gene = gene_qnorm,
cvrt = cvrt,
output_file_name = NULL,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
verbose = TRUE,
output_file_name.cis = NULL,
pvOutputThreshold.cis = pvOutputThreshold,
snpspos = snp_positions,
genepos = gene_positions,
cisDist = cis_dist,
pvalue.hist = 100,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE)
# record trans- pairs
if (dim(me$trans$eqtls)[1] > 0) {
snps_list = sapply(me$trans$eqtls$snps, as.character)
snp_chr = snp_positions[snps_list,]$chr
gene_list = sapply(me$trans$eqtls$gene, as.character)
gene_chr = gene_positions[gene_list,]$chr
snp_loc = snp_positions[snps_list,]$pos
gene_start_loc = gene_positions[gene_list,]$start
gene_end_loc = gene_positions[gene_list,]$end
temp_df = me$trans$eqtls
temp_df$snp_chr = snp_chr
temp_df$snp_pos = snp_loc
temp_df$gene_chr = gene_chr
temp_df$gene_start = gene_start_loc
temp_df$gene_end = gene_end_loc
temp_df$identifier = sapply(c(1:dim(temp_df)[1]), function(x) {paste0(temp_df$snps[x], '_', temp_df$gene[x])})
temp_df = temp_df[(temp_df$identifier %in% input_trans_list$identifier),]
}
cumulative_me_null = data.frame(snps = character(0), gene = character(0), statistic = numeric(0), pvalue = numeric(0), FDR = numeric(0), beta = numeric(0), snp_chr = character(0), snp_pos = numeric(0), gene_chr = character(0), gene_start = numeric(0), gene_end = numeric(0))
cumulative_me_trans = temp_df
if (!is.null(cumulative_me_trans)) {
ordering = order(cumulative_me_trans$pvalue)
ordered_pval = cumulative_me_trans$pvalue[ordering]
cumulative_me_trans = cumulative_me_trans[ordering,]
} else {
cumulative_me_trans = cumulative_me_null
}
# record cis- pairs
if (dim(me$cis$eqtls)[1] > 0) {
snps_list = sapply(me$cis$eqtls$snps, as.character)
snp_chr = snp_positions[snps_list,]$chr
gene_list = sapply(me$cis$eqtls$gene, as.character)
gene_chr = gene_positions[gene_list,]$chr
snp_loc = snp_positions[snps_list,]$pos
gene_start_loc = gene_positions[gene_list,]$start
gene_end_loc = gene_positions[gene_list,]$end
temp_df = me$cis$eqtls
temp_df$snp_chr = snp_chr
temp_df$snp_pos = snp_loc
temp_df$gene_chr = gene_chr
temp_df$gene_start = gene_start_loc
temp_df$gene_end = gene_end_loc
temp_df$identifier = sapply(c(1:dim(temp_df)[1]), function(x) {paste0(temp_df$snps[x], '_', temp_df$gene[x])})
temp_df = temp_df[(temp_df$identifier %in% cis_identifiers),]
}
cumulative_me_cis = temp_df
if (!is.null(cumulative_me_cis)) {
ordering = order(cumulative_me_cis$pvalue)
ordered_pval = cumulative_me_cis$pvalue[ordering]
cumulative_me_cis = cumulative_me_cis[ordering,]
} else {
cumulative_me_cis = cumulative_me_null
}
print(dim(cumulative_me_trans))
return(rbind(cumulative_me_trans, cumulative_me_cis))
}
input_trans_list = read.csv(file = input_trans_list_file, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
input_trans_list = input_trans_list[input_trans_list$tissue == tissue_name,]
View(input_trans_list)
args[5] = thyroid
args[5] = 'thyroid'
tissue_name = args[5]
input_trans_list = read.csv(file = input_trans_list_file, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
input_trans_list = input_trans_list[input_trans_list$tissue == tissue_name,]
View(input_trans_list)
input_trans_list$identifier = sapply(c(1:dim(input_trans_list)[1]), function(x) {paste0(input_trans_list$snps[x], '_', input_trans_list$gene[x])})
expression_matrix = read.csv(file = expression_file_location, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
args[2] = '/Users/brian_jo/Desktop/Project/RNAseq_pipeline/Data/Expression/gtex/hg19/GTEx_phs000424_v6p/normalized/thyroid_nonverlapping_certain_autosomes_normalized.txt'
expression_file_location = args[2]
expression_matrix = read.csv(file = expression_file_location, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
View(expression_matrix)
expression_matrix = read.csv(file = expression_file_location, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
rownames(expression_matrix) = expression_matrix$gene_id
expression_matrix = expression_matrix[,2:dim(expression_matrix)[2]]
expression_matrix = expression_matrix[,(colnames(expression_matrix) %in% colnames(genotype_matrix))]
View(expression_matrix)
temp = cor(expression_matrix)
278*278
which(ARFGEF3 %in% rownames(expression_matrix))
TMTM253
TMEM253
which(TMEM253 %in% rownames(expression_matrix))
which(TMEM253 %in% colnames(expression_matrix))
head(rownames(expression_matrix))
which("ENSG00000000419" %in% rownames(expression_matrix))
proj_dir = '/Users/brian_jo/Desktop/Project/RNAseq_pipeline'
trans_list_file = 'Final_trans_eQTL_list_0.5.txt'
input_dir3 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all/')
input_dir1 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-1third/')
input_dir2 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-2thirds/')
trans_list1 = read.table(paste0(input_dir1, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list2 = read.table(paste0(input_dir2, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list3 = read.table(paste0(input_dir3, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
# Unique identifier for each trans pair
trans_list1$identifier = sapply(c(1:dim(trans_list1)[1]), function(x) {paste0(trans_list1$tissue[x], trans_list1$snps[x], trans_list1$gene[x])})
trans_list2$identifier = sapply(c(1:dim(trans_list2)[1]), function(x) {paste0(trans_list2$tissue[x], trans_list2$snps[x], trans_list2$gene[x])})
trans_list3$identifier = sapply(c(1:dim(trans_list3)[1]), function(x) {paste0(trans_list3$tissue[x], trans_list3$snps[x], trans_list3$gene[x])})
tissue_list = unique(c(trans_list1$tissue, trans_list2$tissue, trans_list3$tissue))
work_dir = paste0(proj_dir, '/Analysis/Figures/trans_list_comparison/')
work_dir = paste0(proj_dir, '/Analysis/Figures/trans_list_comparison/')
trans_list_file = 'Final_trans_eQTL_list_0.5.txt'
input_dir3 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all/')
input_dir1 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-1third/')
input_dir2 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-2thirds/')
trans_list1 = read.table(paste0(input_dir1, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list2 = read.table(paste0(input_dir2, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list3 = read.table(paste0(input_dir3, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
# Unique identifier for each trans pair
trans_list1$identifier = sapply(c(1:dim(trans_list1)[1]), function(x) {paste0(trans_list1$tissue[x], trans_list1$snps[x], trans_list1$gene[x])})
trans_list2$identifier = sapply(c(1:dim(trans_list2)[1]), function(x) {paste0(trans_list2$tissue[x], trans_list2$snps[x], trans_list2$gene[x])})
trans_list3$identifier = sapply(c(1:dim(trans_list3)[1]), function(x) {paste0(trans_list3$tissue[x], trans_list3$snps[x], trans_list3$gene[x])})
tissue_list = unique(c(trans_list1$tissue, trans_list2$tissue, trans_list3$tissue))
num_tissue = length(tissue_list)
# Get the list of total counts
total_counts = data.frame(one_third = sapply(tissue_list, function(x) {sum(trans_list1$tissue == x)}))
total_counts$two_thirds = sapply(tissue_list, function(x) {sum(trans_list2$tissue == x)})
total_counts$all = sapply(tissue_list, function(x) {sum(trans_list3$tissue == x)})
total_counts$tissue = tissue_list
rownames(total_counts) = tissue_list
library(ggplot2)
library(reshape)
melted = melt(total_counts, id='tissue')
colnames(melted) = c('tissue', 'PEER', 'Count')
melted$overlap = 'F'
# Also get the list of counts that are replicated
total_counts_overlap = data.frame(one_third = sapply(tissue_list, function(x) {sum(trans_list1[trans_list1$tissue == x,]$identifier %in% c(trans_list2$identifier, trans_list3$identifier))}))
total_counts_overlap$two_thirds = sapply(tissue_list, function(x) {sum(trans_list2[trans_list2$tissue == x,]$identifier %in% c(trans_list1$identifier, trans_list3$identifier))})
total_counts_overlap$all = sapply(tissue_list, function(x) {sum(trans_list3[trans_list3$tissue == x,]$identifier %in% c(trans_list1$identifier, trans_list2$identifier))})
total_counts_overlap$tissue = tissue_list
rownames(total_counts_overlap) = tissue_list
melted_overlap = melt(total_counts_overlap, id='tissue')
colnames(melted_overlap) = c('tissue', 'PEER', 'Count')
melted_overlap$overlap = 'T'
melted = rbind(melted, melted_overlap)
head(melted)
plots=list()
cols = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
for (i in c(1:num_tissue)) {
t = tissue_list[i]
plots[[i]] = ggplot(melted[melted$tissue == t,], aes(x=overlap, y=Count)) + geom_bar(stat='identity', fill=cols[i]) + facet_grid(~PEER) + ggtitle(t)
}
library(grid)
cols = 3
layout <- matrix(seq(1, cols * ceiling(9/cols)), ncol = cols, nrow = ceiling(9/cols))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:9) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 10:18) {
matchidx <- as.data.frame(which(layout == i-9, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 19:27) {
matchidx <- as.data.frame(which(layout == i-18, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
View(trans_list1)
for (i in 28:36) {
matchidx <- as.data.frame(which(layout == i-27, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
cytoBands = read.table(paste0(work_dir, 'cytoBand.txt'))
View(cytoBands)
colnames(cytoBands) = c('chr', 'start', 'end', 'identifier', '')
View(cytoBands)
input_trans_df = trans_list1[trans_list1$tissue == 'thyroid',]
input_trans_df = trans_list1[trans_list1$tissue == 'adiposevisceral',]
input_trans_df = trans_list1[trans_list1$tissue == 'arterytibial',]
View(input_trans_df)
uniq(input_trans_df$snp_chr)
unique(input_trans_df$snp_chr)
for (x in unique(input_trans_df$snp_chr)){print(x)}
x = 'chr20'
cytoBands_chr = cytoBands[cytoBands$chr == x,]
View(cytoBands_chr)
View(cytoBands_chr)
View(cytoBands_chr)
head(cytoBands_chr)
input_trans_chr = input_trans_df[input_trans_df$chr == x,]
View(input_trans_df)
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
View(input_trans_chr)
View(cytoBands_chr)
902002 < cytoBands_chr$start
902002 > cytoBands_chr$end
902002 > cytoBands_chr$start
902002 < cytoBands_chr$end
which((902002 > cytoBands_chr$start) + (902002 < cytoBands_chr$end))
((902002 > cytoBands_chr$start) + (902002 < cytoBands_chr$end))
which((902002 > cytoBands_chr$start) + (902002 < cytoBands_chr$end) == 2)
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
band_membership
length(unique(band_membership))
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
sum = sum + length(unique(band_membership))
}
sum
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
sum = sum + length(unique(band_membership))
}
return(sum)
}
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1$tissue == x)}))
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
View(total_band_counts)
input_trans_df = trans_list1[trans_list1$tissue = 'colontransverse']
input_trans_df = trans_list1[trans_list1$tissue = 'colontransverse',]
input_trans_df = trans_list1[trans_list1$tissue == 'colontransverse',]
chr_array = unique(input_trans_df$snp_chr)
chr_array
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
sum = sum + length(unique(band_membership))
}
sum
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
su
su
sum
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
# print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
sum = sum + length(unique(band_membership))
}
return(sum)
}
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
total_band_counts$two_thirds = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list2$tissue == x,])})
total_band_counts$all = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list3$tissue == x,])})
total_band_counts$tissue = tissue_list
rownames(total_band_counts) = tissue_list
View(total_band_counts)
tissue_list
length(unique(tissue_list))
dim()
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
total_band_counts$two_thirds = sapply(tissue_list, function(x) {num_cytobands(trans_list2[trans_list2$tissue == x,])})
total_band_counts$all = sapply(tissue_list, function(x) {num_cytobands(trans_list3[trans_list3$tissue == x,])})
total_band_counts$tissue = tissue_list
rownames(total_band_counts) = tissue_list
View(total_band_counts)
melted = melt(total_band_counts, id='tissue')
colnames(melted) = c('tissue', 'PEER', 'Count')
View(melted)
plots=list()
cols = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
for (i in c(1:num_tissue)) {
t = tissue_list[i]
plots[[i]] = ggplot(melted[melted$tissue == t,], aes(x=PEER, y=Count)) + geom_bar(stat='identity', fill=cols[i]) + ggtitle(t)
}
cols = 3
layout <- matrix(seq(1, cols * ceiling(9/cols)), ncol = cols, nrow = ceiling(9/cols))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:9) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 10:18) {
matchidx <- as.data.frame(which(layout == i-9, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 19:27) {
matchidx <- as.data.frame(which(layout == i-18, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 28:36) {
matchidx <- as.data.frame(which(layout == i-27, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 37:43) {
matchidx <- as.data.frame(which(layout == i-36, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
# print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
return(sum)
}
num_cytobands(trans_list1[trans_list1$tissue == 'thyroid',])
input_trans_df = trans_list1[trans_list1$tissue == 'thyroid',]
View(input_trans_df)
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
print(dim(input_trans_chr)[1])
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
View(cytoBands)
sum(cytoBands$chr == 'chr9')
sum(cytoBands$chr == 'chr1')
dim(expression_matrix)
which(sapply(rownames(expression_matrix), function(x) {TMEM253 in x}))
TMEM253
TMEM253 %in% TMEM253
which(sapply(rownames(expression_matrix), function(x) {TMEM253 %in% x}))
head(rownames(expression_matrix))
"ENSG00000000419.8" %in% "ENSG00000000419.8"
"ENSG00000000419" %in% "ENSG00000000419.8"
TMEM253 %in% TMEM253
strsplit("ENSG00000000419.8", ".")
strsplit("ENSG00000000419.8", "\.")
strsplit("ENSG00000000419.8", ".")
strsplit("ENSG00000000419.8", "\\.")
strsplit("ENSG00000000419.8", "\\.")[[1]][1]
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9org156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9org156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9orf156}))
C9ORF156
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORG156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == FOXE1}))
cor(expression_matrix[14393,], expression_matrix[14393,])
cor(as.numeric(expression_matrix[14393,]), as.numeric(expression_matrix[14393,]))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == FOXE1}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
cor(as.numeric(expression_matrix[11632,]), as.numeric(expression_matrix[14393,]))
cor(as.numeric(expression_matrix[6080]), as.numeric(expression_matrix[14393,]))
cor(as.numeric(expression_matrix[6080,]), as.numeric(expression_matrix[14393,]))
suffix = '_Analysis.covariates.txt'
covars = read.table(paste0(cov_dir, tissue_name, suffix), header = TRUE, sep = '\t', stringsAsFactors = FALSE)
rownames(covars) = covars$ID
covars = covars[,colnames(expression_matrix)]
X = t(as.matrix(covars) - rowMeans(covars))
y = t(as.matrix(expression_matrix) - rowMeans(expression_matrix))
res_y = y - (X %*% solve(t(X) %*% X) %*% t(X) %*% y)
dim(res_y)
exp_res = data.frame(t(res_y))
which(sapply(rownames(res_y), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
head(rownames(res_y))
which(sapply(rownames(exp_res), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
cor(as.numeric(exp_res[6080,]), as.numeric(exp_res[14393,]))
cor(as.numeric(exp_res[11632,]), as.numeric(exp_res[14393,]))
which(sapply(rownames(exp_res), function(x) {strsplit(x, "\\.")[[1]][1] == ARFGEF3}))
cor(as.numeric(exp_res[6080,]), as.numeric(exp_res[3371,]))
cor(as.numeric(exp_res[11632,]), as.numeric(exp_res[3371,]))
setwd("~/Desktop/Project/RNAseq_pipeline/Output/trans-mapping/gtex/MR_eQTL/FDR_0.5")
thyroid_MR = read.table('thyroid_MR_results.txt')
View(thyroid_MR)
thyroid_MR = read.table('thyroid_MR_results.txt', header=TRUE, stringsAsFactors=FALSE)
View(thyroid_MR)
qplot(thyroid_MR$t_MR, thyroid_MR$r_sq)
library(ggplot2)
qplot(thyroid_MR$t_MR, thyroid_MR$r_sq)
qplot(log2(thyroid_MR$t_MR), thyroid_MR$r_sq)
qplot(thyroid_MR$t_MR, thyroid_MR$r_sq)
qplot(log2(thyroid_MR$t_MR), thyroid_MR$r_sq)
qplot(log2(thyroid_MR$t_MR), abs(thyroid_MR$r_sq))
qplot((thyroid_MR$t_MR), abs(thyroid_MR$r_sq))
qplot(abs(thyroid_MR$t_MR), abs(thyroid_MR$r_sq))
qplot(abs(thyroid_MR$t_MR), abs(thyroid_MR$r_sq), title='Thyroid t_MR and r_SQ')
qplot(abs(thyroid_MR$t_MR), abs(thyroid_MR$r_sq), main='Thyroid t_MR and r_SQ')
qplot(abs(thyroid_MR$t_MR), abs(thyroid_MR$beta_xz), main='Thyroid t_MR and beta_XZ')
qplot(abs(thyroid_MR$t_MR), abs(thyroid_MR$beta_yz), main='Thyroid t_MR and beta_YZ')
qplot(abs(thyroid_MR$beta_xz), abs(thyroid_MR$beta_yz), main='Thyroid beta_XZ and beta_YZ')
qplot(abs(thyroid_MR$t_MR), abs(thyroid_MR$FDR), main='Thyroid beta_XZ and beta_YZ')
nocov = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt.nocov'), header=TRUE, stringsAsFactors=FALSE)
work_dir = '/Users/brian_jo/Desktop/Project/RNAseq_pipeline/Output/trans-mapping/gtex/MatrixEQTL/seg_runs/'
tissue = 'thyroid'
nocov = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt.nocov'), header=TRUE, stringsAsFactors=FALSE)
View(nocov)
main = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt'), header=TRUE, stringsAsFactors=FALSE)
aa = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt.aa'), header=TRUE, stringsAsFactors=FALSE)
ea = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt.ea'), header=TRUE, stringsAsFactors=FALSE)
beta_comparison_df = data.frame(nocov = nocov$beta, beta = main$beta, pop = 'total')
beta_comparison_df = data.frame(nocov = nocov$beta, beta = main$beta, pop = 'total')
beta_comparison_df = rbind(beta_comparison_df, data.frame(nocov = aa$beta, beta = main$beta, pop = 'aa'))
beta_comparison_df = rbind(beta_comparison_df, data.frame(nocov = ea$beta, beta = main$beta, pop = 'ea'))
View(beta_comparison_df)
qplot(beta_comparison_df$nocov, beta_comparison_df$beta, shape=pop)
qplot(beta_comparison_df$nocov, beta_comparison_df$beta, shape=beta_comparison_df$pop)
qplot(beta_comparison_df$nocov, beta_comparison_df$beta, color=beta_comparison_df$pop)
qplot(abs(beta_comparison_df$nocov), abs(beta_comparison_df$beta), color=beta_comparison_df$pop)
qplot(abs(beta_comparison_df$beta), abs(beta_comparison_df$nocov), color=beta_comparison_df$pop)
beta_comparison_df = data.frame(nocov = nocov$beta, beta = main$beta, pop = 'total')
beta_comparison_df = rbind(beta_comparison_df, data.frame(nocov = nocov$beta, beta = aa$beta, pop = 'aa'))
beta_comparison_df = rbind(beta_comparison_df, data.frame(nocov = nocov$beta, beta = ea$beta, pop = 'ea'))
qplot(abs(beta_comparison_df$beta), abs(beta_comparison_df$nocov), color=beta_comparison_df$pop)
qplot(abs(beta_comparison_df$beta), abs(beta_comparison_df$nocov), color=beta_comparison_df$pop, main = 'Comparison of Population-specific betas to Betas without correction')
qplot(abs(beta_comparison_df$beta), abs(beta_comparison_df$nocov), color=beta_comparison_df$pop, main = 'Thyroid Comparison of Population-specific betas to Betas without correction')
qplot(abs(beta_comparison_df_2$beta), abs(beta_comparison_df_2$main), color=beta_comparison_df$pop, main = 'Thyroid Comparison of Population-specific betas to trans-Betas')
beta_comparison_df_2 = data.frame(main = main$beta, beta = aa$beta, pop = 'aa')
beta_comparison_df_2 = rbind(beta_comparison_df_2, data.frame(main = main$beta, beta = ea$beta, pop = 'aa'))
qplot(abs(beta_comparison_df_2$beta), abs(beta_comparison_df_2$main), color=beta_comparison_df$pop, main = 'Thyroid Comparison of Population-specific betas to trans-Betas')
qplot(abs(beta_comparison_df_2$beta), abs(beta_comparison_df_2$main), color=beta_comparison_df_2$pop, main = 'Thyroid Comparison of Population-specific betas to trans-Betas')
beta_comparison_df_2 = data.frame(main = main$beta, beta = aa$beta, pop = 'aa')
beta_comparison_df_2 = rbind(beta_comparison_df_2, data.frame(main = main$beta, beta = ea$beta, pop = 'ea'))
qplot(abs(beta_comparison_df_2$beta), abs(beta_comparison_df_2$main), color=beta_comparison_df_2$pop, main = 'Thyroid Comparison of Population-specific betas to trans-Betas')
nocov = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt.nocov'), header=TRUE, stringsAsFactors=FALSE)
main = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt'), header=TRUE, stringsAsFactors=FALSE)
aa = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt.aa'), header=TRUE, stringsAsFactors=FALSE)
ea = read.table(paste0(work_dir, tissue, '/', tissue, '_nonverlapping_certain_autosomes_normalized_MatrixEQTL.txt.ea'), header=TRUE, stringsAsFactors=FALSE)
library(ggplot2)
beta_comparison_df = data.frame(nocov = nocov$beta, beta = main$beta, pop = 'total')
beta_comparison_df = rbind(beta_comparison_df, data.frame(nocov = nocov$beta, beta = aa$beta, pop = 'aa'))
beta_comparison_df = rbind(beta_comparison_df, data.frame(nocov = nocov$beta, beta = ea$beta, pop = 'ea'))
qplot(abs(beta_comparison_df$beta), abs(beta_comparison_df$nocov), color=beta_comparison_df$pop, main = 'Thyroid Comparison of Population-specific betas to Betas without correction')
beta_comparison_df_2 = data.frame(main = main$beta, beta = aa$beta, pop = 'aa')
beta_comparison_df_2 = rbind(beta_comparison_df_2, data.frame(main = main$beta, beta = ea$beta, pop = 'ea'))
qplot(abs(beta_comparison_df_2$beta), abs(beta_comparison_df_2$main), color=beta_comparison_df_2$pop, main = 'Thyroid Comparison of Population-specific betas to trans-Betas')
