expression_matrix = read.csv(file = expression_file_location, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
View(expression_matrix)
expression_matrix = read.csv(file = expression_file_location, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
rownames(expression_matrix) = expression_matrix$gene_id
expression_matrix = expression_matrix[,2:dim(expression_matrix)[2]]
expression_matrix = expression_matrix[,(colnames(expression_matrix) %in% colnames(genotype_matrix))]
View(expression_matrix)
temp = cor(expression_matrix)
278*278
which(ARFGEF3 %in% rownames(expression_matrix))
TMTM253
TMEM253
which(TMEM253 %in% rownames(expression_matrix))
which(TMEM253 %in% colnames(expression_matrix))
head(rownames(expression_matrix))
which("ENSG00000000419" %in% rownames(expression_matrix))
proj_dir = '/Users/brian_jo/Desktop/Project/RNAseq_pipeline'
trans_list_file = 'Final_trans_eQTL_list_0.5.txt'
input_dir3 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all/')
input_dir1 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-1third/')
input_dir2 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-2thirds/')
trans_list1 = read.table(paste0(input_dir1, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list2 = read.table(paste0(input_dir2, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list3 = read.table(paste0(input_dir3, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
# Unique identifier for each trans pair
trans_list1$identifier = sapply(c(1:dim(trans_list1)[1]), function(x) {paste0(trans_list1$tissue[x], trans_list1$snps[x], trans_list1$gene[x])})
trans_list2$identifier = sapply(c(1:dim(trans_list2)[1]), function(x) {paste0(trans_list2$tissue[x], trans_list2$snps[x], trans_list2$gene[x])})
trans_list3$identifier = sapply(c(1:dim(trans_list3)[1]), function(x) {paste0(trans_list3$tissue[x], trans_list3$snps[x], trans_list3$gene[x])})
tissue_list = unique(c(trans_list1$tissue, trans_list2$tissue, trans_list3$tissue))
work_dir = paste0(proj_dir, '/Analysis/Figures/trans_list_comparison/')
work_dir = paste0(proj_dir, '/Analysis/Figures/trans_list_comparison/')
trans_list_file = 'Final_trans_eQTL_list_0.5.txt'
input_dir3 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all/')
input_dir1 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-1third/')
input_dir2 = paste0(proj_dir, '/Output/trans-mapping/gtex/trans-eQTLs/MatrixEQTL/all-by-all-2thirds/')
trans_list1 = read.table(paste0(input_dir1, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list2 = read.table(paste0(input_dir2, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
trans_list3 = read.table(paste0(input_dir3, trans_list_file), header=TRUE, stringsAsFactors=FALSE)
# Unique identifier for each trans pair
trans_list1$identifier = sapply(c(1:dim(trans_list1)[1]), function(x) {paste0(trans_list1$tissue[x], trans_list1$snps[x], trans_list1$gene[x])})
trans_list2$identifier = sapply(c(1:dim(trans_list2)[1]), function(x) {paste0(trans_list2$tissue[x], trans_list2$snps[x], trans_list2$gene[x])})
trans_list3$identifier = sapply(c(1:dim(trans_list3)[1]), function(x) {paste0(trans_list3$tissue[x], trans_list3$snps[x], trans_list3$gene[x])})
tissue_list = unique(c(trans_list1$tissue, trans_list2$tissue, trans_list3$tissue))
num_tissue = length(tissue_list)
# Get the list of total counts
total_counts = data.frame(one_third = sapply(tissue_list, function(x) {sum(trans_list1$tissue == x)}))
total_counts$two_thirds = sapply(tissue_list, function(x) {sum(trans_list2$tissue == x)})
total_counts$all = sapply(tissue_list, function(x) {sum(trans_list3$tissue == x)})
total_counts$tissue = tissue_list
rownames(total_counts) = tissue_list
library(ggplot2)
library(reshape)
melted = melt(total_counts, id='tissue')
colnames(melted) = c('tissue', 'PEER', 'Count')
melted$overlap = 'F'
# Also get the list of counts that are replicated
total_counts_overlap = data.frame(one_third = sapply(tissue_list, function(x) {sum(trans_list1[trans_list1$tissue == x,]$identifier %in% c(trans_list2$identifier, trans_list3$identifier))}))
total_counts_overlap$two_thirds = sapply(tissue_list, function(x) {sum(trans_list2[trans_list2$tissue == x,]$identifier %in% c(trans_list1$identifier, trans_list3$identifier))})
total_counts_overlap$all = sapply(tissue_list, function(x) {sum(trans_list3[trans_list3$tissue == x,]$identifier %in% c(trans_list1$identifier, trans_list2$identifier))})
total_counts_overlap$tissue = tissue_list
rownames(total_counts_overlap) = tissue_list
melted_overlap = melt(total_counts_overlap, id='tissue')
colnames(melted_overlap) = c('tissue', 'PEER', 'Count')
melted_overlap$overlap = 'T'
melted = rbind(melted, melted_overlap)
head(melted)
plots=list()
cols = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
for (i in c(1:num_tissue)) {
t = tissue_list[i]
plots[[i]] = ggplot(melted[melted$tissue == t,], aes(x=overlap, y=Count)) + geom_bar(stat='identity', fill=cols[i]) + facet_grid(~PEER) + ggtitle(t)
}
library(grid)
cols = 3
layout <- matrix(seq(1, cols * ceiling(9/cols)), ncol = cols, nrow = ceiling(9/cols))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:9) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 10:18) {
matchidx <- as.data.frame(which(layout == i-9, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 19:27) {
matchidx <- as.data.frame(which(layout == i-18, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
View(trans_list1)
for (i in 28:36) {
matchidx <- as.data.frame(which(layout == i-27, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
cytoBands = read.table(paste0(work_dir, 'cytoBand.txt'))
View(cytoBands)
colnames(cytoBands) = c('chr', 'start', 'end', 'identifier', '')
View(cytoBands)
input_trans_df = trans_list1[trans_list1$tissue == 'thyroid',]
input_trans_df = trans_list1[trans_list1$tissue == 'adiposevisceral',]
input_trans_df = trans_list1[trans_list1$tissue == 'arterytibial',]
View(input_trans_df)
uniq(input_trans_df$snp_chr)
unique(input_trans_df$snp_chr)
for (x in unique(input_trans_df$snp_chr)){print(x)}
x = 'chr20'
cytoBands_chr = cytoBands[cytoBands$chr == x,]
View(cytoBands_chr)
View(cytoBands_chr)
View(cytoBands_chr)
head(cytoBands_chr)
input_trans_chr = input_trans_df[input_trans_df$chr == x,]
View(input_trans_df)
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
View(input_trans_chr)
View(cytoBands_chr)
902002 < cytoBands_chr$start
902002 > cytoBands_chr$end
902002 > cytoBands_chr$start
902002 < cytoBands_chr$end
which((902002 > cytoBands_chr$start) + (902002 < cytoBands_chr$end))
((902002 > cytoBands_chr$start) + (902002 < cytoBands_chr$end))
which((902002 > cytoBands_chr$start) + (902002 < cytoBands_chr$end) == 2)
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
band_membership
length(unique(band_membership))
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
sum = sum + length(unique(band_membership))
}
sum
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
sum = sum + length(unique(band_membership))
}
return(sum)
}
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1$tissue == x)}))
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
View(total_band_counts)
input_trans_df = trans_list1[trans_list1$tissue = 'colontransverse']
input_trans_df = trans_list1[trans_list1$tissue = 'colontransverse',]
input_trans_df = trans_list1[trans_list1$tissue == 'colontransverse',]
chr_array = unique(input_trans_df$snp_chr)
chr_array
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
sum = sum + length(unique(band_membership))
}
sum
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
su
su
sum
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
# print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
sum = sum + length(unique(band_membership))
}
return(sum)
}
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
total_band_counts$two_thirds = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list2$tissue == x,])})
total_band_counts$all = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list3$tissue == x,])})
total_band_counts$tissue = tissue_list
rownames(total_band_counts) = tissue_list
View(total_band_counts)
tissue_list
length(unique(tissue_list))
dim()
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
total_band_counts$two_thirds = sapply(tissue_list, function(x) {num_cytobands(trans_list2[trans_list2$tissue == x,])})
total_band_counts$all = sapply(tissue_list, function(x) {num_cytobands(trans_list3[trans_list3$tissue == x,])})
total_band_counts$tissue = tissue_list
rownames(total_band_counts) = tissue_list
View(total_band_counts)
melted = melt(total_band_counts, id='tissue')
colnames(melted) = c('tissue', 'PEER', 'Count')
View(melted)
plots=list()
cols = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
for (i in c(1:num_tissue)) {
t = tissue_list[i]
plots[[i]] = ggplot(melted[melted$tissue == t,], aes(x=PEER, y=Count)) + geom_bar(stat='identity', fill=cols[i]) + ggtitle(t)
}
cols = 3
layout <- matrix(seq(1, cols * ceiling(9/cols)), ncol = cols, nrow = ceiling(9/cols))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:9) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 10:18) {
matchidx <- as.data.frame(which(layout == i-9, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 19:27) {
matchidx <- as.data.frame(which(layout == i-18, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 28:36) {
matchidx <- as.data.frame(which(layout == i-27, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 37:43) {
matchidx <- as.data.frame(which(layout == i-36, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
# print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
return(sum)
}
num_cytobands(trans_list1[trans_list1$tissue == 'thyroid',])
input_trans_df = trans_list1[trans_list1$tissue == 'thyroid',]
View(input_trans_df)
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
print(dim(input_trans_chr)[1])
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
View(cytoBands)
sum(cytoBands$chr == 'chr9')
sum(cytoBands$chr == 'chr1')
dim(expression_matrix)
which(sapply(rownames(expression_matrix), function(x) {TMEM253 in x}))
TMEM253
TMEM253 %in% TMEM253
which(sapply(rownames(expression_matrix), function(x) {TMEM253 %in% x}))
head(rownames(expression_matrix))
"ENSG00000000419.8" %in% "ENSG00000000419.8"
"ENSG00000000419" %in% "ENSG00000000419.8"
TMEM253 %in% TMEM253
strsplit("ENSG00000000419.8", ".")
strsplit("ENSG00000000419.8", "\.")
strsplit("ENSG00000000419.8", ".")
strsplit("ENSG00000000419.8", "\\.")
strsplit("ENSG00000000419.8", "\\.")[[1]][1]
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9org156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9org156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9orf156}))
C9ORF156
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORG156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == FOXE1}))
cor(expression_matrix[14393,], expression_matrix[14393,])
cor(as.numeric(expression_matrix[14393,]), as.numeric(expression_matrix[14393,]))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == FOXE1}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
cor(as.numeric(expression_matrix[11632,]), as.numeric(expression_matrix[14393,]))
cor(as.numeric(expression_matrix[6080]), as.numeric(expression_matrix[14393,]))
cor(as.numeric(expression_matrix[6080,]), as.numeric(expression_matrix[14393,]))
suffix = '_Analysis.covariates.txt'
covars = read.table(paste0(cov_dir, tissue_name, suffix), header = TRUE, sep = '\t', stringsAsFactors = FALSE)
rownames(covars) = covars$ID
covars = covars[,colnames(expression_matrix)]
X = t(as.matrix(covars) - rowMeans(covars))
y = t(as.matrix(expression_matrix) - rowMeans(expression_matrix))
res_y = y - (X %*% solve(t(X) %*% X) %*% t(X) %*% y)
dim(res_y)
exp_res = data.frame(t(res_y))
which(sapply(rownames(res_y), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
head(rownames(res_y))
which(sapply(rownames(exp_res), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
cor(as.numeric(exp_res[6080,]), as.numeric(exp_res[14393,]))
cor(as.numeric(exp_res[11632,]), as.numeric(exp_res[14393,]))
which(sapply(rownames(exp_res), function(x) {strsplit(x, "\\.")[[1]][1] == ARFGEF3}))
cor(as.numeric(exp_res[6080,]), as.numeric(exp_res[3371,]))
cor(as.numeric(exp_res[11632,]), as.numeric(exp_res[3371,]))
load("~/Desktop/review_figures/temp.RData")
library(ggplot2)
qplot(expression_matrix, genotype_matrix)
qplot(expression_matrix, genotype_matrix[1,])
qplot(as.numeric(expression_matrix[1,]), as.numeric(genotype_matrix[1,]))
qplot(as.numeric(genotype_matrix[1,]), as.numeric(expression_matrix[1,]))
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]))
View(temp)
temp$pop = sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})
View(temp)
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = 0)
View(temp)
sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})] = 1
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})] = 2
View(temp)
plot(temp, aes(x = exp, y = gen, colour = pop))
qplot(temp, aes(x = exp, y = gen, colour = pop)) + geom+point()
qplot(temp, aes(x = exp, y = gen, colour = pop)) + geom_point()
ggplot(temp, aes(x = exp, y = gen, colour = pop)) + geom_point()
ggplot(temp, aes(x = gen, y = exp, colour = factor(pop))) + geom_point()
ggplot(temp, aes(x = geno_res, y = exp_res, colour = factor(pop))) + geom_point()
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = NA)
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = 'NA')
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})] = 'AA'
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = 0)
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})] = 1
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})] = 2
ggplot(temp, aes(x = geno_res, y = exp_res, colour = factor(pop))) + geom_point()
ggplot(temp, aes(x = geno, y = exp, colour = factor(pop))) + geom_point()
ggplot(temp, aes(x = gen, y = exp, colour = factor(pop))) + geom_point()
sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})
AA_bool
AA_bool = sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})
ggplot(temp, aes(x = gen[AA_bool], y = exp[AA_bool], colour = factor(pop[AA_bool]))) + geom_point()
ggplot(temp, aes(x = gen[AA_bool], y = exp[AA_bool]) + geom_point()
)
ggplot(temp, aes(x = gen[AA_bool], y = exp[AA_bool])) + geom_point()
gen[AA_bool]
ggplot(temp[AA_bool,], aes(x = gen, y = exp)) + geom_point()
View(exp_res)
View(geno_res)
View(exp_res)
ENSG00000137824.11
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
getBM(attributes=c('ensembl_gene_id','hgnc_symbol'),filters='hgnc_symbol',values=x,mart=ensembl)$ensembl_gene_id
x = 'SDHAF4'
getBM(attributes=c('ensembl_gene_id','hgnc_symbol'),filters='hgnc_symbol',values=x,mart=ensembl)$ensembl_gene_id
getBM(attributes=c('ensembl_gene_id','hgnc_symbol'),filters='hgnc_symbol',values=x,mart=ensembl)
x
setwd("~/Desktop/Project/RNAseq_pipeline/Data/Networks/GGR/modified")
load("~/Desktop/Project/RNAseq_pipeline/Data/Networks/GGR/modified/prot2TPM-0mean-reps-er-norm-lasso-1-union-fdr-0_full_result.RData")
rm(ensembl)
rm(x)
library(ggplot2)
length(cumulative_me$trans$pvalue)
length(cumulative_me_perm$trans$pvalue)
trans_pvals = data.frame(pval = cumulative_me$trans$pvalue, test = 'test')
trans_pvals = rbind(trans_pvals, data.frame(pval = cumulative_me_perm$trans$pvalue, test = 'null'))
ggplot(trans_pvals, aes(pval, fill = test)) + geom_density(alpha = 0.1)
ggplot(trans_pvals, aes(pval, fill = test)) + geom_density(alpha = 0.2)
ggplot(trans_pvals, aes(pval, fill = test)) + geom_density(alpha = 0.3)
sum(cumulative_me$trans$pvalue < 0.01)
sum(cumulative_me_perm$trans$pvalue < 0.01)
ggplot(trans_pvals, aes(log(pval), fill = test)) + geom_density(alpha = 0.3)
ggplot(trans_pvals, aes(pval, fill = test)) + geom_density(alpha = 0.3)
ggplot(trans_pvals, aes(pval, fill = test)) + geom_hist(alpha = 0.3)
ggplot(trans_pvals, aes(pval, fill = test)) + geom_histogram()
ggplot(trans_pvals, aes(pval, fill = test)) + geom_histogram(binwidth = 0.01)
sum(cumulative_me$trans$pvalue < 0.01)
sum(cumulative_me$trans$pvalue < 0.02)
sum(cumulative_me$trans$pvalue < 0.03)
sum(cumulative_me$trans$pvalue < 0.04)
sum(cumulative_me$trans$pvalue < 0.05)
ggplot(trans_pvals, aes(pval, fill = test)) + geom_histogram(binwidth = 0.01) + xlim(c(0,1))
ggplot(trans_pvals, aes(pval, fill = test)) + geom_density(alpha = 0.3) + xlim(c(0,1))
ggplot(trans_pvals, aes(pval, fill = test)) + geom_histogram(binwidth = 0.01) + xlim(c(0,1))
ggplot(trans_pvals, aes(pval))
+ geom_histogram(data = trans_pvals[trans_pvals$test == 'test',], fill = 'blue', binwidth = 0.01)
+ geom_histogram(data = trans_pvals[trans_pvals$test == 'null',], fill = 'red', binwidth = 0.01)
+ xlim(c(0,1))
trans_pvals$test == 'test'
ggplot(trans_pvals, aes(pval))
+ geom_histogram(data = trans_pvals[(trans_pvals$test == 'test'),], fill = 'blue', binwidth = 0.01, alpha = 0.1)
ggplot(trans_pvals, aes(pval))
+ geom_histogram(data = subset(trans_pvals, test == 'test'), fill = 'blue', binwidth = 0.01, alpha = 0.1)
subset(trans_pvals, test == 'test')
ggplot(trans_pvals, aes(pval))
+ geom_histogram(data = subset(trans_pvals, test == 'test'), fill = 'blue', alpha = 0.1)
ggplot(trans_pvals, aes(pval))
+ geom_histogram(data = subset(trans_pvals, test == 'test'))
ggplot(trans_pvals, aes(pval)) + geom_histogram(binwidth = 0.01) + xlim(c(0,1))
ggplot(trans_pvals, aes(pval, fill=test)) + geom_histogram(binwidth = 0.01) + xlim(c(0,1))
ggplot(trans_pvals, aes(pval, fill=test)) + geom_histogram(binwidth = 0.01, position='identity') + xlim(c(0,1))
ggplot(trans_pvals, aes(pval, fill=test)) + geom_histogram(binwidth = 0.01, position='identity', alpha = 0.4) + xlim(c(0,1))
ggplot(trans_pvals, aes(pval, fill=test)) + geom_histogram(binwidth = 0.01, position='identity', alpha = 0.5) + xlim(c(0,1))
ggplot(trans_pvals, aes(pval, fill=test)) + geom_histogram(binwidth = 0.01, position='identity', alpha = 0.5) + xlim(c(0,1)) + ggtitle('P-value histogram for causal-cis-SNPs and effect gene')
ggplot(trans_pvals, aes(pval, fill=test)) + geom_histogram(binwidth = 0.01, position='identity', alpha = 0.5) + xlim(c(0,1)) + ggtitle('P-value histogram for causal-cis-SNPs and effect genes')
order(cumulative_me$trans$pval)
g = ggplot(qqplot_df, aes(x = null, y = pval)) + geom_point() + geom_abline(slope = 1, intercept = 0)
qqplot_df = data.frame(pval = cumulative_me$trans$pval, null = cumulative_me_perm$trans$pval)
g = ggplot(qqplot_df, aes(x = null, y = pval)) + geom_point() + geom_abline(slope = 1, intercept = 0)
ggplot(qqplot_df, aes(x = -log10(null), y = -log10(pval))) + geom_point() + geom_abline(slope = 1, intercept = 0)
ggplot(qqplot_df, aes(x = -log10(null), y = -log10(pval))) + geom_point() + geom_abline(slope = 1, intercept = 0) + ggtitle('QQ plot of causal-cis-SNPs and effect genes')
head(Full_table)
ggplot(Full_table, aes(x = abs(Weight), y = abs(t_MR))) + geom_point()
ggplot(Full_table, aes(x = abs(Weight), y = abs(t_MR_perm))) + geom_point()
ggplot(Full_table, aes(x = abs(Weight), y = abs(t_MR))) + geom_point()
ggplot(Full_table, aes(x = log(abs(Weight)), y = log(abs(t_MR)))) + geom_point()
ggplot(Full_table, aes(x = log10(abs(Weight)), y = log10(abs(t_MR)))) + geom_point()
ggplot(Full_table, aes(x = log(abs(Weight)), y = log(abs(t_MR)))) + geom_point()
ggplot(Full_table, aes(x = abs(Weight), y = abs(t_MR))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(t_MR_perm))) + geom_point()
View(Full_table)
ggplot(Full_table, aes(x = abs(t_MR), y = abs(r_sq))) + geom_point()
ggplot(Full_table, aes(x = log(abs(t_MR)), y = log(abs(r_sq)))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(r_sq))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_xz))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_yz))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_yz_per,))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_yz_perm))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_yz_perm))) + geom_point()
hist(Full_table$Weight)
hist(Full_table$beta_xz)
hist(Full_table$Weight)
hist(Full_table$beta_xz)
hist(Full_table$beta_yz)
hist(Full_table$t_MR)
ggplot(Full_table, aes(x = AbsWeight, y = abs(beta_yz))) + geom_point()
ggplot(Full_table, aes(x = AbsWeight, y = abs(beta_xz))) + geom_point()
ggplot(Full_table, aes(x = AbsWeight, y = abs(beta_yz))) + geom_point()
ggplot(Full_table, aes(x = t_MR, y = abs(beta_yz))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_yz))) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_xz))) + geom_point()
ggplot(Full_table, aes(x = AbsWeight, y = abs(r_sq))) + geom_point()
ggplot(Full_table, aes(x = log(AbsWeight), y = log(abs(r_sq)))) + geom_point()
ggplot(Full_table, aes(x = beta_xz, y = t_MR )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_xz), y = abs(t_MR) )) + geom_point()
ggplot(Full_table, aes(x = abs(t_MR), y = abs(beta_xz) )) + geom_point()
ggplot(Full_table, aes(x = log(abs(t_MR)), y = log(abs(beta_xz)) )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_xz), y = abs(t_MR) )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_xz), y = log(abs(t_MR)) )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_yz), y = log(abs(t_MR)) )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_xz), y = log(abs(t_MR)) )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_yz), y = log(abs(t_MR)) )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_xz), y = log(abs(t_MR)) )) + geom_point()
ggplot(Full_table, aes(x = abs(beta_xz), y = log(abs(t_MR)) )) + geom_point() + ggtitle('Correspondence between cis-beta and t_MR')
ggplot(Full_table, aes(x = abs(beta_yz), y = log(abs(t_MR)) )) + geom_point() + ggtitle('Correspondence between cis-beta and t_MR')
ggplot(Full_table, aes(x = abs(beta_yz), y = log(abs(t_MR)) )) + geom_point() + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = abs(t_MR_perm), y = log(abs(t_MR)) )) + geom_point() + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = log(abs(t_MR_perm)), y = log(abs(t_MR)) )) + geom_point() + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = (abs(t_MR_perm)), y = (abs(t_MR)) )) + geom_point() + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = log(abs(t_MR_perm)), y = log(abs(t_MR)) )) + geom_point() + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = log(abs(t_MR_perm)), y = log(abs(t_MR)) )) + geom_point() + geom_abline(slope = 1, intercept = 0) + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = (abs(t_MR_perm)), y = (abs(t_MR)) )) + geom_point() + geom_abline(slope = 1, intercept = 0) + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = log(abs(t_MR_perm)), y = log(abs(t_MR)) )) + geom_point() + geom_abline(slope = 1, intercept = 0) + ggtitle('Correspondence between trans-beta and t_MR')
ggplot(Full_table, aes(x = log(abs(t_MR_perm)), y = log(abs(t_MR)) )) + geom_point() + geom_abline(slope = 1, intercept = 0) + ggtitle('Comparing t_MR and permuted t_MR')
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(r_sq), colour = 'r_sq')) + geom_point(aes(y = abs(beta_xz), colour = 'beta_xz')) + geom_point(aes(y = abs(beta_yz), colour = 'beta_yz')) + + geom_point(aes(y = abs(t_MR), colour = 't_MR'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(r_sq), colour = 'r_sq'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(r_sq), colour = 'r_sq')) + geom_point(aes(y = abs(beta_xz), colour = 'beta_xz'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(beta_xz), colour = 'beta_xz')) + geom_point(aes(y = abs(beta_yz), colour = 'beta_yz')) + geom_point(aes(y = abs(t_MR), colour = 't_MR'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(beta_xz), colour = 'beta_xz')) + geom_point(aes(y = abs(beta_yz), colour = 'beta_yz')) + geom_point(aes(y = log(abs(t_MR)), colour = 't_MR'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(beta_xz), colour = 'beta_xz')) + geom_point(aes(y = abs(beta_yz), colour = 'beta_yz'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(t_MR), colour = 't_MR')) + geom_point(aes(y = abs(t_MR_perm), colour = 't_MR_perm'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_density(aes(y = abs(t_MR), colour = 't_MR')) + geom_density(aes(y = abs(t_MR_perm), colour = 't_MR_perm'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_density(aes(y = abs(t_MR), colour = 't_MR')) + geom_density(aes(y = abs(t_MR_perm), colour = 't_MR_perm'))
density_df = data.frame(AbsWeight = Full_table$AbsWeight, statistic = Full_table$t_MR, test = 'test')
density_df = rbind(density_df, data.frame(AbsWeight = Full_table$AbsWeight, statistic = Full_table$t_MR_perm, test = 'perm'))
ggplot(density_df, aes(x = AbsWeight, y = statistic)) + geom_density(aes(colour = test))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(t_MR), colour = 't_MR')) + geom_point(aes(y = abs(t_MR_perm), colour = 't_MR_perm'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(beta_xz), colour = 'beta_xz')) + geom_point(aes(y = abs(beta_yz), colour = 'beta_yz'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(t_MR), colour = 't_MR')) + geom_point(aes(y = abs(t_MR_perm), colour = 't_MR_perm'))
ggplot(Full_table, aes(x = AbsWeight)) + geom_point(aes(y = abs(t_MR), colour = 't_MR'), alpha = 0.5) + geom_point(aes(y = abs(t_MR_perm), colour = 't_MR_perm'), alpha = 0.5)
histogram(Full_table$t_MR)
ggplot(Full_table, aes(t_MR)) + geom_histogram()
ggplot(Full_table, aes(abs(t_MR))) + geom_histogram()
ggplot(Full_table, aes(abs(t_MR_perm))) + geom_histogram()
ggplot(Full_table, aes(abs(t_MR))) + geom_histogram()
ggplot(Full_table, aes(abs(t_MR_perm))) + geom_histogram()
qqplot_t_df = data.frame(t_MR = Full_table$t_MR[order(Full_table$t_MR)], t_MR_perm = Full_table$t_MR_perm[order(Full_table$t_MR_perm)])
ggplot(qqplot_t_df, aes(x = log(t_MR_perm), y = log(t_MR))) + geom_point() + geom_abline(slope = 1, intercept = 0)
head(Full_table$t_MR[order(Full_table$t_MR)])
tail(Full_table$t_MR[order(Full_table$t_MR)])
qqplot_t_df = data.frame(t_MR = Full_table$t_MR[order(abs(Full_table$t_MR))], t_MR_perm = Full_table$t_MR_perm[order(abs(Full_table$t_MR_perm))])
ggplot(qqplot_t_df, aes(x = log(abs(t_MR_perm)), y = log(abs(t_MR)))) + geom_point() + geom_abline(slope = 1, intercept = 0)
