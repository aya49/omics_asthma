sum
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(band_membership)
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
su
su
sum
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
# print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
sum = sum + length(unique(band_membership))
}
return(sum)
}
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
total_band_counts$two_thirds = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list2$tissue == x,])})
total_band_counts$all = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list3$tissue == x,])})
total_band_counts$tissue = tissue_list
rownames(total_band_counts) = tissue_list
View(total_band_counts)
tissue_list
length(unique(tissue_list))
dim()
total_band_counts = data.frame(one_third = sapply(tissue_list, function(x) {num_cytobands(trans_list1[trans_list1$tissue == x,])}))
total_band_counts$two_thirds = sapply(tissue_list, function(x) {num_cytobands(trans_list2[trans_list2$tissue == x,])})
total_band_counts$all = sapply(tissue_list, function(x) {num_cytobands(trans_list3[trans_list3$tissue == x,])})
total_band_counts$tissue = tissue_list
rownames(total_band_counts) = tissue_list
View(total_band_counts)
melted = melt(total_band_counts, id='tissue')
colnames(melted) = c('tissue', 'PEER', 'Count')
View(melted)
plots=list()
cols = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
for (i in c(1:num_tissue)) {
t = tissue_list[i]
plots[[i]] = ggplot(melted[melted$tissue == t,], aes(x=PEER, y=Count)) + geom_bar(stat='identity', fill=cols[i]) + ggtitle(t)
}
cols = 3
layout <- matrix(seq(1, cols * ceiling(9/cols)), ncol = cols, nrow = ceiling(9/cols))
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:9) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 10:18) {
matchidx <- as.data.frame(which(layout == i-9, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 19:27) {
matchidx <- as.data.frame(which(layout == i-18, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 28:36) {
matchidx <- as.data.frame(which(layout == i-27, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
for (i in 37:43) {
matchidx <- as.data.frame(which(layout == i-36, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
}
num_cytobands = function(input_trans_df) {
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
# print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
return(sum)
}
num_cytobands(trans_list1[trans_list1$tissue == 'thyroid',])
input_trans_df = trans_list1[trans_list1$tissue == 'thyroid',]
View(input_trans_df)
sum = 0
chr_array = unique(input_trans_df$snp_chr)
for (x in chr_array) {
print(x)
cytoBands_chr = cytoBands[cytoBands$chr == x,]
input_trans_chr = input_trans_df[input_trans_df$snp_chr == x,]
print(dim(input_trans_chr)[1])
# which band does it belong to?
band_membership = sapply(input_trans_chr$snp_pos, function(x) {which((x > cytoBands_chr$start) + (x < cytoBands_chr$end) == 2)})
print(length(unique(band_membership)))
sum = sum + length(unique(band_membership))
}
View(cytoBands)
sum(cytoBands$chr == 'chr9')
sum(cytoBands$chr == 'chr1')
dim(expression_matrix)
which(sapply(rownames(expression_matrix), function(x) {TMEM253 in x}))
TMEM253
TMEM253 %in% TMEM253
which(sapply(rownames(expression_matrix), function(x) {TMEM253 %in% x}))
head(rownames(expression_matrix))
"ENSG00000000419.8" %in% "ENSG00000000419.8"
"ENSG00000000419" %in% "ENSG00000000419.8"
TMEM253 %in% TMEM253
strsplit("ENSG00000000419.8", ".")
strsplit("ENSG00000000419.8", "\.")
strsplit("ENSG00000000419.8", ".")
strsplit("ENSG00000000419.8", "\\.")
strsplit("ENSG00000000419.8", "\\.")[[1]][1]
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9org156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9org156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9orf156}))
C9ORF156
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORG156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == FOXE1}))
cor(expression_matrix[14393,], expression_matrix[14393,])
cor(as.numeric(expression_matrix[14393,]), as.numeric(expression_matrix[14393,]))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == FOXE1}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == TMEM253}))
which(sapply(rownames(expression_matrix), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
cor(as.numeric(expression_matrix[11632,]), as.numeric(expression_matrix[14393,]))
cor(as.numeric(expression_matrix[6080]), as.numeric(expression_matrix[14393,]))
cor(as.numeric(expression_matrix[6080,]), as.numeric(expression_matrix[14393,]))
suffix = '_Analysis.covariates.txt'
covars = read.table(paste0(cov_dir, tissue_name, suffix), header = TRUE, sep = '\t', stringsAsFactors = FALSE)
rownames(covars) = covars$ID
covars = covars[,colnames(expression_matrix)]
X = t(as.matrix(covars) - rowMeans(covars))
y = t(as.matrix(expression_matrix) - rowMeans(expression_matrix))
res_y = y - (X %*% solve(t(X) %*% X) %*% t(X) %*% y)
dim(res_y)
exp_res = data.frame(t(res_y))
which(sapply(rownames(res_y), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
head(rownames(res_y))
which(sapply(rownames(exp_res), function(x) {strsplit(x, "\\.")[[1]][1] == C9ORF156}))
cor(as.numeric(exp_res[6080,]), as.numeric(exp_res[14393,]))
cor(as.numeric(exp_res[11632,]), as.numeric(exp_res[14393,]))
which(sapply(rownames(exp_res), function(x) {strsplit(x, "\\.")[[1]][1] == ARFGEF3}))
cor(as.numeric(exp_res[6080,]), as.numeric(exp_res[3371,]))
cor(as.numeric(exp_res[11632,]), as.numeric(exp_res[3371,]))
load("~/Desktop/review_figures/temp.RData")
library(ggplot2)
qplot(expression_matrix, genotype_matrix)
qplot(expression_matrix, genotype_matrix[1,])
qplot(as.numeric(expression_matrix[1,]), as.numeric(genotype_matrix[1,]))
qplot(as.numeric(genotype_matrix[1,]), as.numeric(expression_matrix[1,]))
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]))
View(temp)
temp$pop = sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})
View(temp)
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = 0)
View(temp)
sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})] = 1
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})] = 2
View(temp)
plot(temp, aes(x = exp, y = gen, colour = pop))
qplot(temp, aes(x = exp, y = gen, colour = pop)) + geom+point()
qplot(temp, aes(x = exp, y = gen, colour = pop)) + geom_point()
ggplot(temp, aes(x = exp, y = gen, colour = pop)) + geom_point()
ggplot(temp, aes(x = gen, y = exp, colour = factor(pop))) + geom_point()
ggplot(temp, aes(x = geno_res, y = exp_res, colour = factor(pop))) + geom_point()
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = NA)
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = 'NA')
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})] = 'AA'
temp = data.frame(exp = as.numeric(expression_matrix[1,]), exp_res = as.numeric(exp_res[1,]), gen = as.numeric(genotype_matrix[1,]), geno_res = as.numeric(geno_res[1,]), pop = 0)
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})] = 1
temp$pop[sapply(colnames(expression_matrix), function(x) {x %in% EA_indiv})] = 2
ggplot(temp, aes(x = geno_res, y = exp_res, colour = factor(pop))) + geom_point()
ggplot(temp, aes(x = geno, y = exp, colour = factor(pop))) + geom_point()
ggplot(temp, aes(x = gen, y = exp, colour = factor(pop))) + geom_point()
sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})
AA_bool
AA_bool = sapply(colnames(expression_matrix), function(x) {x %in% AA_indiv})
ggplot(temp, aes(x = gen[AA_bool], y = exp[AA_bool], colour = factor(pop[AA_bool]))) + geom_point()
ggplot(temp, aes(x = gen[AA_bool], y = exp[AA_bool]) + geom_point()
)
ggplot(temp, aes(x = gen[AA_bool], y = exp[AA_bool])) + geom_point()
gen[AA_bool]
ggplot(temp[AA_bool,], aes(x = gen, y = exp)) + geom_point()
View(exp_res)
View(geno_res)
View(exp_res)
ENSG00000137824.11
load("~/Desktop/Project/RNAseq_pipeline/Analysis/Figures/manuscript_figures/PEER_increment_counts/count_df.RData")
library(ggplot2)
library(cowplot)
cols = 3
plots_per_fig = 6
# manually pick 6 tissues to plot
plot_tissue_list = c('colontransverse', 'muscleskeletal', 'thyroid', 'esophagusmucosa', 'skinsunexposedlowerleg', 'testis')
plot_tissue_names = c('Colon - Transverse', 'Muscle - Skeletal', 'Thyroid', 'Esophagus - Mucosa', 'Skin - Sun Exposed (Lower Leg)', 'Testis')
num_tissue = 6
colors = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
plots=list()
i = 1
for (tissue in names(plot_tissue_list)) {
temp_df = final_list_counts_df[as.character(final_list_counts_df$tissue) == tissue,]
# Print only when at least one instance where counts exceed 10
if (sum(temp_df$count) > 0) {
plots[[i]] = ggplot(temp_df, aes(x=Type, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
i = i + 1
}
}
plot_grid(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 3, nrow = 2)
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = final_list_counts_df[as.character(final_list_counts_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=Type, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
i = i + 1
}
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=Type, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
i = i + 1
}
plot_grid(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 3, nrow = 2)
View(count_df)
ggplot(temp_df, aes(x=Type, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
temp_df
load("~/Desktop/Project/RNAseq_pipeline/Analysis/Figures/manuscript_figures/PEER_increment_counts/count_df.RData")
ggplot(temp_df, aes(x=Type, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
i
i = 1
i = 6
ggplot(temp_df, aes(x=Type, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
View(count_df)
count_df$PEER = as.numeric(count_df$PEER)
count_df$tissue = as.character(count_df$tissue)
View(count_df)
load("~/Desktop/Project/RNAseq_pipeline/Analysis/Figures/manuscript_figures/PEER_increment_counts/count_df.RData")
View(count_df)
View(count_df)
count_df$tissue = as.character(count_df$tissue)
View(count_df)
as.numeric(count_df$PEER)
count_df$PEER
as.numeric(as.character(count_df$PEER))
# num_tissue = sum( plot_tissue_list > 0 )
colors = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(Type) + ggtitle(plot_tissue_names[i])
i = i + 1
}
count_df$PEER = as.numeric(as.character(count_df$PEER))
View(temp_df)
count_df$PEER = as.numeric(as.character(count_df$PEER))
i
temp_df = count_df[as.character(count_df$tissue) == tissue,]
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(Type) + ggtitle(plot_tissue_names[i])
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid('Type') + ggtitle(plot_tissue_names[i])
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + ggtitle(plot_tissue_names[i])
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i])
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts')
ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts') + theme_classic()
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts') + theme_classic()
i = i + 1
}
plot_grid(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 3, nrow = 2)
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts')
i = i + 1
}
plot_grid(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 3, nrow = 2)
plot_tissue_list = c('colontransverse', 'esophagusmucosa', 'skinsunexposedlowerleg', 'muscleskeletal', 'thyroid', 'testis')
plot_tissue_names = c('Colon - Transverse', 'Esophagus - Mucosa', 'Skin - Sun Exposed (Lower Leg)', 'Muscle - Skeletal', 'Thyroid', 'Testis')
num_tissue = 6
# plot_tissue_list = sapply(tissues, function(x) {sum(final_list_counts_df[final_list_counts_df$tissue == x,'count'])})
# plot_tissue_list = plot_tissue_list[order(plot_tissue_list, decreasing=T)]
# num_tissue = sum( plot_tissue_list > 0 )
colors = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts')
i = i + 1
}
plot_grid(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 3, nrow = 2)
colors = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts')
i = i + 1
}
load("~/Desktop/Project/RNAseq_pipeline/Analysis/Figures/manuscript_figures/PEER_increment_counts/count_df.RData")
View(count_df)
count_df$tissue
count_df$tissue = as.character(count_df$tissue)
count_df$PEER = as.numeric(as.character(count_df$PEER))
plot_tissue_list = c('colontransverse', 'esophagusmucosa', 'skinsunexposedlowerleg', 'muscleskeletal', 'thyroid', 'testis')
plot_tissue_names = c('Colon - Transverse', 'Esophagus - Mucosa', 'Skin - Sun Exposed (Lower Leg)', 'Muscle - Skeletal', 'Thyroid', 'Testis')
num_tissue = 6
# plot_tissue_list = sapply(tissues, function(x) {sum(final_list_counts_df[final_list_counts_df$tissue == x,'count'])})
# plot_tissue_list = plot_tissue_list[order(plot_tissue_list, decreasing=T)]
# num_tissue = sum( plot_tissue_list > 0 )
colors = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts')
i = i + 1
}
plot_grid(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 3, nrow = 2)
plot_tissue_list = c('esophagusmucosa', 'colontransverse', 'skinsunexposedlowerleg', 'muscleskeletal', 'thyroid', 'testis')
plot_tissue_names = c('Esophagus - Mucosa', 'Colon - Transverse', 'Skin - Sun Exposed (Lower Leg)', 'Muscle - Skeletal', 'Thyroid', 'Testis')
num_tissue = 6
# plot_tissue_list = sapply(tissues, function(x) {sum(final_list_counts_df[final_list_counts_df$tissue == x,'count'])})
# plot_tissue_list = plot_tissue_list[order(plot_tissue_list, decreasing=T)]
# num_tissue = sum( plot_tissue_list > 0 )
colors = rainbow(num_tissue, s=.6, v=.9)[sample(1:num_tissue,num_tissue)]
plots=list()
i = 1
for (tissue in plot_tissue_list) {
temp_df = count_df[as.character(count_df$tissue) == tissue,]
plots[[i]] = ggplot(temp_df, aes(x=PEER, y=count)) + geom_bar(stat='identity', fill=colors[i]) + facet_grid(. ~ Type) + ggtitle(plot_tissue_names[i]) + xlab('# PEER factors') + ylab('Counts')
i = i + 1
}
# pdf(paste0(work_dir, 'plots/PEER_increment_counts.pdf'), width = 6, height = 4)
plot_grid(plots[[1]], plots[[2]], plots[[3]], plots[[4]], plots[[5]], plots[[6]], ncol = 3, nrow = 2)
rotation = c('Allison','Roberta','Bianca','Genna','Ari','Greg D','Mark','Li-fang','Derek','Brian','Koushiki
Niranjani')
rotation = c('Allison','Roberta','Bianca','Genna','Ari','Greg D','Mark','Li-fang','Derek','Brian','Koushiki','Niranjani')
sample(rotation)
a = c(1:12)
2^(1/12)
int = 2^(1/12)
notes = sapply(a, function(x) {x^(a-1)})
notes = sapply(a, function(x) {int^(x-1)})
notes
a = c(1:13)
notes = sapply(a, function(x) {int^(x-1)})
notes
notes[3]
library(ggplot2)
qplot(int, notes)
qplot(a, notes)
notes[7]/notes[4]
notes[7]/notes[3]
256*(6/5)
256*(3/2)
256*sqrt(3/2)
256*(6/5)
256*(5/4)
notes[13] / notes[8]
notes[10]/notes[6]
qplot(a, notes-1)
notes
7/4
256*1.75
256*1.25
256*1.5
notes[11]
notes[11]*256
448/384
256*6/5
256*6/5
307*5/4
311.127 / 261.626
261.626*1.2
261.626*1.5
261.626*1.25
256*1.25
256*1.5
256*1.75
256*4/3
256*5/3
5/3
notes
256*6/5
256*7/5
256*8/5
256*9/5
6/5
7/5
notes
2^(1/5)
2^(2/5)
2^(3/5)
2^(4/5)
256*1.2
256*1.4
256*1.6
256*1.8
notes-1
1/6
1/7
1/8
1/19
1/18
1/17
1/16
notes
9/8
1/6
5/6
256*1.2
256*7/6
256*9/6
256*10/6
256*7/6
256*11/6
qplot(a, notes-1)
qplot(a, notes-1) + geom_hline(yintercept = 1/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/6) + geom_hline(yintercept = 5/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/6) + geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/6) + geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/5) + geom_hline(yintercept = 2/5) + geom_hline(yintercept = 3/5) + geom_hline(yintercept = 4/5)
qplot(a, notes-1) + geom_hline(yintercept = 1/6) + geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/6, 'b') + geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/6, aes(col = 'b')) + geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/6, aes(col = 'blue')) + geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(yintercept = 1/6, aes(color = 'blue')) + geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(aes(yintercept = 1/6, color='blue'))+ geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(aes(yintercept = 1/6, colour='blue'))+ geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
qplot(a, notes-1) + geom_hline(aes(yintercept = 1/6), colour='blue')+ geom_hline(yintercept = 5/6) + geom_hline(yintercept = 2/6) + geom_hline(yintercept = 4/6) + geom_hline(yintercept = 3/6)
\
qplot(a, notes-1)
+ geom_hline(aes(yintercept = 1/6), colour='blue')
+ geom_hline(aes(yintercept = 2/6), colour='blue')
+ geom_hline(aes(yintercept = 3/6), colour='blue')
+ geom_hline(aes(yintercept = 4/6), colour='blue')
+ geom_hline(aes(yintercept = 5/6), colour='blue')
+ geom_hline(aes(yintercept = 1/5), colour='red')
+ geom_hline(aes(yintercept = 2/5), colour='red')
+ geom_hline(aes(yintercept = 3/5), colour='red')
+ geom_hline(aes(yintercept = 4/5), colour='red')
qplot(a, notes-1) \
+ geom_hline(aes(yintercept = 1/6), colour='blue') \
+ geom_hline(aes(yintercept = 2/6), colour='blue') \
+ geom_hline(aes(yintercept = 3/6), colour='blue') \
+ geom_hline(aes(yintercept = 4/6), colour='blue') \
+ geom_hline(aes(yintercept = 5/6), colour='blue') \
+ geom_hline(aes(yintercept = 1/5), colour='red') \
+ geom_hline(aes(yintercept = 2/5), colour='red') \
+ geom_hline(aes(yintercept = 3/5), colour='red') \
+ geom_hline(aes(yintercept = 4/5), colour='red')
qplot(a, notes-1)
qplot(a, notes-1) + geom_hline(aes(yintercept = 1/6), colour='blue') + geom_hline(aes(yintercept = 2/6), colour='blue') + geom_hline(aes(yintercept = 3/6), colour='blue') + geom_hline(aes(yintercept = 4/6), colour='blue') + geom_hline(aes(yintercept = 5/6), colour='blue') + geom_hline(aes(yintercept = 1/5), colour='red') + geom_hline(aes(yintercept = 2/5), colour='red') + geom_hline(aes(yintercept = 3/5), colour='red') + geom_hline(aes(yintercept = 4/5), colour='red')
qplot(a, notes-1) + geom_hline(aes(yintercept = 1/6), colour='blue') + geom_hline(aes(yintercept = 2/6), colour='blue') + geom_hline(aes(yintercept = 3/6), colour='blue') + geom_hline(aes(yintercept = 4/6), colour='blue') + geom_hline(aes(yintercept = 5/6), colour='blue') + geom_hline(aes(yintercept = 1/5), colour='red') + geom_hline(aes(yintercept = 2/5), colour='red') + geom_hline(aes(yintercept = 3/5), colour='red') + geom_hline(aes(yintercept = 4/5), colour='red') + geom_hline(aes(yintercept = 1/8), colour='black') + geom_hline(aes(yintercept = 2/8), colour='black') + geom_hline(aes(yintercept = 3/8), colour='black') + geom_hline(aes(yintercept = 4/8), colour='black') + geom_hline(aes(yintercept = 5/8), colour='black') + geom_hline(aes(yintercept = 6/8), colour='black') + geom_hline(aes(yintercept = 7/8), colour='black')
sqrt(1.5)
notes
256*1.2
256*1.4
256*1.6
256*1.8
256.1.25
256*1.25
256*1.5
256*1.75
qplot(a, notes-1) + geom_hline(aes(yintercept = 1/6), colour='blue') + geom_hline(aes(yintercept = 2/6), colour='blue') + geom_hline(aes(yintercept = 3/6), colour='blue') + geom_hline(aes(yintercept = 4/6), colour='blue') + geom_hline(aes(yintercept = 5/6), colour='blue') + geom_hline(aes(yintercept = 1/5), colour='red') + geom_hline(aes(yintercept = 2/5), colour='red') + geom_hline(aes(yintercept = 3/5), colour='red') + geom_hline(aes(yintercept = 4/5), colour='red') + geom_hline(aes(yintercept = 1/8), colour='black') + geom_hline(aes(yintercept = 2/8), colour='black') + geom_hline(aes(yintercept = 3/8), colour='black') + geom_hline(aes(yintercept = 4/8), colour='black') + geom_hline(aes(yintercept = 5/8), colour='black') + geom_hline(aes(yintercept = 6/8), colour='black') + geom_hline(aes(yintercept = 7/8), colour='black')
qplot(a, notes-1) + geom_hline(aes(yintercept = 1/6), colour='blue') + geom_hline(aes(yintercept = 2/6), colour='blue') + geom_hline(aes(yintercept = 3/6), colour='blue') + geom_hline(aes(yintercept = 4/6), colour='blue') + geom_hline(aes(yintercept = 5/6), colour='blue') + geom_hline(aes(yintercept = 1/5), colour='red') + geom_hline(aes(yintercept = 2/5), colour='red') + geom_hline(aes(yintercept = 3/5), colour='red') + geom_hline(aes(yintercept = 4/5), colour='red') + geom_hline(aes(yintercept = 1/8), colour='black') + geom_hline(aes(yintercept = 2/8), colour='black') + geom_hline(aes(yintercept = 3/8), colour='black') + geom_hline(aes(yintercept = 4/8), colour='black') + geom_hline(aes(yintercept = 5/8), colour='black') + geom_hline(aes(yintercept = 6/8), colour='black') + geom_hline(aes(yintercept = 7/8), colour='black')
256*4/3
256*5/3
256*1.5
256*11/6
setwd("~/Desktop/Project/RNAseq_pipeline/Data/Resources/gtex/tables")
sample_table = read.table('sample_table.txt', header=T, stringsAsFactors=F)
sample_table = read.table('sample_table.txt', header=T, stringsAsFactors=F, sep='\t')
subject_table = read.table('subject_table.txt', header=T, stringsAsFactors=F, sep='\t')
View(subject_table)
View(subject_table)
View(sample_table)
View(sample_table)
length(unique(sample_table$submitted_subject_id_s))
dim(subject_table)
sum(subject_table$genotype_avail)
genotype_subjects = row.names(subject_table)[subject_table$genotype_avail]
z = sapply(sample_table$submitted_subject_id_s, function(x) {x %in% genotype_subjects})
sum(z)
tissue_table = read.table('subject_table.txt', header=T, stringsAsFactors=F, sep='\t')
View(tissue_table)
tissue_table = read.table('tissue_table.txt', header=T, stringsAsFactors=F, sep='\t')
View(tissue_table)
View(tissue_table)
sum(tissue_table$num_samples)
sum(tissue_table$num_samples_with_geno)
